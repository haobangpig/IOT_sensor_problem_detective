[{"id":"32ecea7e.681516","type":"ibmiot in","z":"8ef94584.b9f8d8","authentication":"quickstart","apiKey":"","inputType":"evt","deviceId":"70661d97f70f","applicationId":"","deviceType":"+","eventType":"+","commandType":"","format":"json","name":"sensor","service":"quickstart","allDevices":"","allApplications":"","allDeviceTypes":true,"allEvents":true,"allCommands":"","allFormats":"","qos":0,"x":65,"y":106.00000190734863,"wires":[["9772f418.aaa458"]]},{"id":"9772f418.aaa458","type":"delay","z":"8ef94584.b9f8d8","name":"1msg/min","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"1","rateUnits":"minute","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":true,"x":232.5,"y":105.00000190734863,"wires":[["bb3f1f3d.74817"]]},{"id":"bb3f1f3d.74817","type":"function","z":"8ef94584.b9f8d8","name":"format EX","func":"var getTimestamp = function () {\n    var date = new Date();\n    date.setHours(date.getHours() + 9);\n    var ts = date.getFullYear() + '-';\n    ts += (\"0\"+(date.getMonth()+1)).slice(-2) + '-';\n    ts += (\"0\"+date.getDate()).slice(-2) + '_';\n    ts += (\"0\"+date.getHours()).slice(-2) + ':';\n    ts += (\"0\"+date.getMinutes()).slice(-2) + ':';\n    ts += (\"0\"+date.getSeconds()).slice(-2);\n    return ts;\n}\n\nmsg.payload = {\n    \"name\": msg.payload.d.name,\n    \"timestamp\": getTimestamp(),\n    \"temp\": msg.payload.d.temp,\n    \"humidity\": msg.payload.d.humidity,\n    \"objectTemp\": msg.payload.d.objectTemp\n};\n\nreturn msg;","outputs":1,"noerr":0,"x":401.50000190734863,"y":106.75000190734863,"wires":[["4a87c2ab.d1894c","977e1c67.5c8e8","a1b72925.c48f38"]]},{"id":"4a87c2ab.d1894c","type":"debug","z":"8ef94584.b9f8d8","name":"","active":true,"console":"false","complete":"payload","x":617,"y":97,"wires":[]},{"id":"977e1c67.5c8e8","type":"cloudant out","z":"8ef94584.b9f8d8","name":"cloudantDB","cloudant":"","database":"sensordata","service":"cograph123-cloudantNoSQLDB","payonly":true,"operation":"insert","x":636,"y":162,"wires":[]},{"id":"c19bc905.3cd6f8","type":"inject","z":"8ef94584.b9f8d8","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":94,"y":374,"wires":[[]]},{"id":"628bc094.ce867","type":"function","z":"8ef94584.b9f8d8","name":"search param","func":"msg.payload = {\n    \"query\": \"timestamp: 2016*\",\n    \"sort\" : \"-timestamp<string>\",\n    \"limit\": msg.payload.num\n};\n\nreturn msg;","outputs":1,"noerr":0,"x":276,"y":300,"wires":[["dda63c7f.e4815"]]},{"id":"dda63c7f.e4815","type":"cloudant in","z":"8ef94584.b9f8d8","name":"cloudant","cloudant":"","database":"sensordata","service":"cograph123-cloudantNoSQLDB","search":"_idx_","design":"index","index":"IndexByTimestamp","x":457,"y":302,"wires":[["10c1eb68.602ab5","c1237000.b1692"]]},{"id":"10c1eb68.602ab5","type":"debug","z":"8ef94584.b9f8d8","name":"","active":true,"console":"false","complete":"payload","x":626,"y":360,"wires":[]},{"id":"d9a22572.fd7408","type":"http in","z":"8ef94584.b9f8d8","name":"","url":"/data","method":"get","swaggerDoc":"","x":65,"y":301,"wires":[["628bc094.ce867"]]},{"id":"c1237000.b1692","type":"http response","z":"8ef94584.b9f8d8","name":"","x":620,"y":290,"wires":[]},{"id":"9e1cfb00.512dc8","type":"comment","z":"8ef94584.b9f8d8","name":"cloudant からデータを取得処理","info":"","x":135,"y":216,"wires":[]},{"id":"9ce86381.bdc5c","type":"comment","z":"8ef94584.b9f8d8","name":"get the sensor data and store it","info":"","x":159,"y":33,"wires":[]},{"id":"f052bd9b.e5bce","type":"comment","z":"8ef94584.b9f8d8","name":"Web application","info":"","x":85,"y":443,"wires":[]},{"id":"227b21a7.57da9e","type":"http in","z":"8ef94584.b9f8d8","name":"get","url":"/graph","method":"get","swaggerDoc":"","x":58,"y":519,"wires":[["3dfe5fe5.5bfd5"]]},{"id":"3dfe5fe5.5bfd5","type":"template","z":"8ef94584.b9f8d8","name":"index.html","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<!-- jQuery -->\n<script src=\"http://code.jquery.com/jquery-1.12.0.min.js\"></script>\n<!-- d3.js -->\n<script src=\"http://d3js.org/d3.v3.min.js\" charset=\"utf-8\"></script>\n \n<title>IoT demo chart</title>\n \n<style>\n  body {\n  font: 20px sans-serif;\n  }\n  .axis path,\n  .axis line {\n    fill: none;\n    stroke: #000;\n    shape-rendering: crispEdges;\n    stroke-width: 2.5px;\n  }\n \n  .x.axis path {\n    display: none;\n\n  }\n \n  .line {\n    fill: none;\n    stroke: royalblue;\n    stroke-width: 3px;\n  }\n  \n  .line2 {\n    fill: none;\n    stroke: orangered;\n    stroke-width: 3px;\n  }\n  \n  .line3 {\n    fill: none;\n    stroke: forestgreen;\n    stroke-width: 3px;\n  }\n\n  .button {\n    background-color: #4CAF50; /* Green */\n    border: none;\n    color: white;\n    padding: 15px 32px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    margin: 4px 2px;\n    cursor: pointer;\n    -webkit-transition-duration: 0.4s; /* Safari */\n    transition-duration: 0.4s;\n  }\n  .button2:hover {\n    box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24),0 17px 50px 0 rgba(0,0,0,0.19);\n  }\n\n</style>\n  \n  \n<script type=\"text/javascript\">\n  //グラフ用のデータ配列\n  var data = [];\n  //WebSocket接続用 Node-REDで生成した文字列を指定\n  var wsUrl = 'ws://cograph123.mybluemix.net/ws/sensor';\n  var socket;\n \nwindow.addEventListener('load', function () {\n  //Cloudant APIのURL\n  var recordnum = 10;\n  var dataurl = \"./data?num=\" + recordnum;\n  \n  //Cloudantからデータ取得して初期表示\n  d3.json(dataurl, function(datas){\n      //console.log(\"===== d3.json ========\");\n      //console.log(datas);\n      //JSONで取得する項目はそのまま使えるのでグラフ用配列にセット        \n      data = datas;\n      //配列の順序を入れ替えてセット→D3.jsがよしなにしてくれるので不要\n      //     for (var i in datas){\n      //         data.unshift(datas[i]);\n      //     }\n      //console.log(\"==== data object =====\");    \n      //console.log(data);        \n \n      //グラフ描画処理\n      drawInitialChart();\n      \n      //最新データを表示\n      var dispdata = {\n          timestamp : formatDateTime(new Date(datas[0].timestamp)),\n          temp : datas[0].temp,\n          humidity : datas[0].humidity,\n          objectTemp : datas[0].objectTemp\n      };\n      disp_info(dispdata);\n  });\n});\n</script>\n</head>\n \n<body>\n<center>\n \n<div style=\"margin:30px;\">\n  <h1>IoTセンサーデータ可視化＆故障予測</h1>\n  <div>\n      <p>最新データ　：　\n      <span id=\"latestts\">timestamp</span>\n      , <span style=\"color:royalblue;\">気温：<span id=\"latesttemp\">xx</span></span>\n      , <span style=\"color:forestgreen;\">湿度：<span id=\"latesthum\">xx</span></span>\n      , <span style=\"color:orangered;\">機械温度：<span id=\"latestot\">xx</span></span>\n      \n      <span>　　　　</span>\n      故障予測：<span id=\"predict_failure\"></span>\n      （スコア：<span id=\"predict_score\"></span>）\n      </p>\n  </div>\n \n  <div id=\"chartarea\"></div>\n  <p></p>\n  <div>\n      <button onclick=\"wsConnect()\" class=\"button button2\">WebSocket接続</button>\n      <button onclick=\"wsDisconnect()\" class=\"button button2\">WebSocket切断</button>\n      <span id=\"con-msg\">message</span>\n  </div>\n \n</div>\n \n<script>\n \n  //D3.js 初期処理\n  //表示サイズを設定\n  var areasize = {width: 960, height: 500};\n  var margin = {top: 40, right: 40, bottom: 40, left: 40};\n  //グラフ表示用の高さと幅\n  var chartwidth = areasize.width - margin.left - margin.right-30;\n  var chartheight = areasize.height - margin.top - margin.bottom-30;\n \n  var formatDateTime = d3.time.format(\"%Y-%m-%d_%H:%M:%S\");\n  var parseDate = d3.time.format(\"%Y-%m-%d_%H:%M:%S\").parse;\n \n \n  //SVG領域の設定\n  var svg = d3.select(\"#chartarea\").append(\"svg\")\n      .attr(\"width\", areasize.width)\n      .attr(\"height\", areasize.height)\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n \n  var x = d3.time.scale()\n      .range([0, chartwidth]);\n \n  var y = d3.scale.linear()\n      .range([chartheight, 0]);\n      \n  var y2 = d3.scale.linear()\n      .range([chartheight, 0]);\n \n  var xAxis = d3.svg.axis()\n      .scale(x)\n      .orient(\"bottom\");\n      //.orient(\"bottom\")\n      //.tickFormat(d3.time.format(\"%m/%d_%H:%M\"));\n  //温度のY軸（左側）\n  var yAxis = d3.svg.axis()\n      .scale(y)\n      .orient(\"left\");\n  //湿度のY軸（右側）\n  var yAxis2 = d3.svg.axis()\n      .scale(y2)\n      .orient(\"right\");\n  //ライン・気温\n  var line = d3.svg.line()\n      .x(function(d){ return x(d.timestamp); })\n      .y(function(d){ return y(d.temp); });\n  //ライン・機器温度\n  var line2 = d3.svg.line()\n      .x(function(d){ return x(d.timestamp); })\n      .y(function(d){ return y(d.objectTemp); });\n  //ライン・湿度\n  var line3 = d3.svg.line()\n      .x(function(d){ return x(d.timestamp); })\n      .y(function(d){ return y2(d.humidity); });\n \n \n \n//グラフの初期描画処理　データ取得後にコールされる\nfunction drawInitialChart(){\n  //console.log(\"===== drawInitialChart ======\");\n \n  data.forEach(function(d){\n      d.timestamp = parseDate(d.timestamp);\n      d.temp = +d.temp;\n      d.objectTemp = +d.objectTemp;\n      d.humidity = +d.humidity;\n  });\n \n  //X軸のドメイン＝Timestampの最小値と最大値\n  x.domain(d3.extent(data, function(d){ return d.timestamp; }));\n  //Y軸のドメイン＝0から、気温Maxと機器温度Maxの大きい方\n  y.domain([0, 100]);\n  //Y軸（湿度）は0-100固定\n  y2.domain([0, 100]);\n \n  //X軸　描画\n  svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0, \" + chartheight + \")\")\n      .call(xAxis);\n  //Y軸（左）　描画\n  svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .call(yAxis)\n      .append(\"text\")\n          .attr(\"transform\", \"translate(60,-20) rotate(0)\")\n          .attr(\"y\", 6)\n          .attr(\"dy\", \".7em\")\n          .style(\"text-anchor\", \"end\")\n          .text(\"（℃）\");\n  //Y軸（右）　描画\n  svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .attr(\"transform\", \"translate(\" + chartwidth + \" ,0)\")\n      .call(yAxis2)\n      .append(\"text\")\n          .attr(\"transform\", \"translate(0,-20) rotate(0)\")\n          .attr(\"y\", 6)\n          .attr(\"dy\", \".7em\")\n          .style(\"text-anchor\", \"end\")\n          .text(\"湿度（％）\");\n \n  svg.append(\"path\")\n      .datum(data)\n      .attr(\"class\", \"line\")\n      .attr(\"d\", line);\n      \n  svg.append(\"path\")\n      .datum(data)\n      .attr(\"class\", \"line2\")\n      .attr(\"d\", line2);\n \n  svg.append(\"path\")\n      .datum(data)\n      .attr(\"class\", \"line3\")\n      .attr(\"d\", line3);\n}\n \n//データ更新時の描画処理\nfunction updateDraw() {\n  console.log(\"===== updateDraw =======\");\n  console.log(data);\n  \n  data.forEach(function(d){\n      d.timestamp = d.timestamp;\n      d.temp = +d.temp;\n      d.objectTemp = +d.objectTemp;\n      d.humidity = +d.humidity;\n  });\n  \n  //ドメイン（入力値の範囲）更新\n  x.domain(d3.extent(data, function(d){ return d.timestamp; }));\n \n  y.domain([0, 100]);\n  y2.domain([0, 100]);\n \n \n  //アニメーション宣言\n  svg = d3.select(\"#chartarea\").transition();\n \n  svg.select(\".line\") \n      .duration(750)\n      .attr(\"d\", line(data));\n \n  svg.select(\".line2\") \n      .duration(750)\n      .attr(\"d\", line2(data));\n \n  svg.select(\".line3\") \n      .duration(750)\n      .attr(\"d\", line3(data));\n \n  svg.select(\".x.axis\")\n      .duration(750)\n      .call(xAxis);\n \n  svg.select(\".y.axis\")\n      .duration(750)\n      .call(yAxis);\n\n  svg.select(\".circle\")\n      .duration(750)\n      .attr('cx', line.x())\n      .attr('cy', line.y());\n}\n \n \n//接続・切断時のメッセージを表示\nfunction disp_msg(str) {\n  var msgarea = $(\"#con-msg\");\n  msgarea.text(str);\n  msgarea.stop().fadeIn(0).fadeOut(2000);\n}\n \n//最新データ表示\nfunction disp_info(wsdata){\n  $(\"#latestts\").text(wsdata.timestamp);\n  $(\"#latesttemp\").text(wsdata.temp);\n  $(\"#latesthum\").text(wsdata.humidity);\n  $(\"#latestot\").text(wsdata.objectTemp);\n}\n \n \n//WebSocket接続\nfunction wsConnect() {\n  socket = new WebSocket(wsUrl);\n  \n  disp_msg('接続しました。');\n \n  \n  socket.onmessage = function(e) {\n      var wsData = JSON.parse(e.data);\n      console.log(\"timestamp:\" + wsData.timestamp + \" , temp:\" + wsData.temp);\n      //最新データの情報を表示\n      disp_info(wsData);\n      \n      //グラフのデータを更新 \n      //グラフ用のデータが新しい順になっているので、配列の先頭に追加する\n      data.unshift({\n          timestamp : parseDate(wsData.timestamp),\n          temp : wsData.temp,\n          humidity: wsData.humidity,\n          objectTemp: wsData.objectTemp\n      });\n      //配列の末尾を取り除く\n      data.pop();\n      \n      //グラフ描画\n      updateDraw();\n      \n      //Predictive Analytics呼び出し\n      $.ajax({\n          url: \"./predict\",\n          data: {\n              \"param_temp\" : wsData.temp,\n              \"param_hum\"  : wsData.humidity,\n              \"param_objt\" : wsData.objectTemp\n          }\n      }).done(function(result){\n          console.log(\"===== Predictive Analytics Call ======\");\n          console.log(result); \n          //alert(\"success!\");\n          $(\"#predict_failure\").text(result[0].data[0][3]);\n          $(\"#predict_score\").text( (Math.round( result[0].data[0][4] * 1000) /1000)  );\n      }).fail(function(result){\n          alert(\"error!\");\n      });\n      \n      \n  };\n};\n \n//WebSocket切断\nfunction wsDisconnect() {\n  socket.close();\n  disp_msg('切断しました');\n};    \n</script>\n</center>\n</body>\n</html>","x":257.1428527832031,"y":519.4285717010498,"wires":[["72d39857.9f2558"]]},{"id":"72d39857.9f2558","type":"http response","z":"8ef94584.b9f8d8","name":"","x":484.714298248291,"y":518.5714454650879,"wires":[]},{"id":"a1b72925.c48f38","type":"websocket out","z":"8ef94584.b9f8d8","name":"websocket","server":"474497e2.47fa98","client":"","x":622,"y":234,"wires":[]},{"id":"87ca4dfe.e0f58","type":"comment","z":"8ef94584.b9f8d8","name":"PA","info":"","x":55,"y":596,"wires":[]},{"id":"a00d904a.a22b6","type":"inject","z":"8ef94584.b9f8d8","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":86,"y":766,"wires":[[]]},{"id":"692bfcdb.055d74","type":"function","z":"8ef94584.b9f8d8","name":"POST paramater","func":"msg.payload = {\n  \"tablename\":\"SECOM_DEMO_DATA.csv\", \n  \"header\":[\"seq_no\",\"failure\",\"temperature\",\"humidity\",\"objecttemperature\"], \n  \"data\":[[\"test1\",\"\",\n      msg.payload.param_temp,\n      msg.payload.param_hum,\n      msg.payload.param_objt\n  ]]\n};\nreturn msg;","outputs":1,"noerr":0,"x":287,"y":665,"wires":[["c0a4b3b6.8cbdf"]]},{"id":"c0a4b3b6.8cbdf","type":"http request","z":"8ef94584.b9f8d8","name":"Predict API","method":"POST","ret":"obj","url":"https://palbyp.pmservice.ibmcloud.com/pm/v1/score/cograp?accesskey=Ih9hKf5xLGJEIqhFiVGgyAU3teW71p1hw8QZRm6K0rVgYOKFWYILdJfXO5oij2mLHxGxQ3pIogjgEOjN0TGDTcL0h32gVzPkwMbmHXNpi+HV13uJ/zndvkxm8ouZk89VNXwjtV5EIPkP4pRyEn0Z1EF6eYMOdQkK2Tb6nTqmWpc=","tls":"","x":526,"y":660,"wires":[["c4066dfc.936c6","6600466d.255578"]]},{"id":"c4066dfc.936c6","type":"debug","z":"8ef94584.b9f8d8","name":"","active":true,"console":"false","complete":"false","x":732,"y":770.2856922149658,"wires":[]},{"id":"73dbaae5.011614","type":"http in","z":"8ef94584.b9f8d8","name":"","url":"/predict","method":"get","swaggerDoc":"","x":75,"y":666,"wires":[["692bfcdb.055d74"]]},{"id":"6600466d.255578","type":"http response","z":"8ef94584.b9f8d8","name":"","x":723,"y":671,"wires":[]},{"id":"474497e2.47fa98","type":"websocket-listener","z":"8ef94584.b9f8d8","path":"/ws/sensor","wholemsg":"false"}]